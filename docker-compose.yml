version: '3.8'

services:
  # PostgreSQL for User Service
  postgres-user:
    image: postgres:15-alpine
    container_name: postgres-user
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Product Service
  postgres-product:
    image: postgres:15-alpine
    container_name: postgres-product
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service (Spring Boot)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    depends_on:
      postgres-user:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/userdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    networks:
      - microservice-network
    restart: unless-stopped

  # Product Service (Django)
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "8082:8082"
    depends_on:
      postgres-product:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres-product:5432/productdb
    volumes:
      # Mount source code for auto-reload (development only)
      - ./product-service:/app
      # Exclude virtual environment and cache
      - /app/__pycache__
      - /app/*/__pycache__
    networks:
      - microservice-network
    restart: unless-stopped

  # Inventory Service (Flask) - VULNERABLE TO SSRF
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8083:8083"
    environment:
      PORT: 8083
    volumes:
      # Mount source code for auto-reload (development only)
      - ./inventory-service:/app
      - /app/__pycache__
    networks:
      - microservice-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - product-service
      - inventory-service
    environment:
      REACT_APP_API_URL: http://localhost
    volumes:
      # Mount source code for hot reload (development only)
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      # Exclude node_modules to use container's version
      - /app/node_modules
    networks:
      - microservice-network
    restart: unless-stopped

networks:
  microservice-network:
    driver: bridge

volumes:
  postgres-user-data:
  postgres-product-data:
